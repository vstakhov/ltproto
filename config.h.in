#ifndef LTOPT_CONFIG_H_IN
#define LTOPT_CONFIG_H_IN

#cmakedefine HAVE_SYS_TYPES_H    1

#cmakedefine HAVE_SYS_TIME_H     1

#cmakedefine HAVE_SYS_UIO_H      1

#cmakedefine HAVE_FCNTL_H        1

#cmakedefine HAVE_MATH_H         1

#cmakedefine HAVE_STDIO_H        1

#cmakedefine HAVE_STDLIB_H       1

#cmakedefine HAVE_STRING_H       1

#cmakedefine HAVE_STRINGS_H      1

#cmakedefine HAVE_TIME_H         1

#cmakedefine HAVE_UNISTD_H       1

#cmakedefine HAVE_SYSEXITS_H     1

#cmakedefine HAVE_STDINT_H       1

#cmakedefine HAVE_INTTYPES_H     1

#cmakedefine HAVE_STDBOOL_H      1

#cmakedefine HAVE_ARPA_INET_H    1
#cmakedefine HAVE_NETINET_IN_H   1

#cmakedefine HAVE_NETDB_H        1

#cmakedefine HAVE_POLL_H         1

#cmakedefine HAVE_ENDIAN_H       1
#cmakedefine HAVE_SYS_ENDIAN_H   1
#cmakedefine HAVE_MACHINE_ENDIAN_H  1
#cmakedefine HAVE_SYS_CDEFS_H    1

#ifdef HAVE_ENDIAN_H
 #include <endian.h>
#else 
 #ifdef HAVE_SYS_ENDIAN_H
  #include <sys/endian.h>
 #else
  #ifdef HAVE_MACHINE_ENDIAN_H
   #include <machine/endian.h>
  #else
   #define LITTLE_ENDIAN   1234    
   #define BIG_ENDIAN      4321    
   #if defined(i386) || defined(__i386) || defined(__amd64) || \
     defined(BIT_ZERO_ON_RIGHT) || defined(__x86__)
    #define BYTE_ORDER      LITTLE_ENDIAN
   #endif
 
   #if defined(__sparc) || defined(__sparc__) || defined(__powerpc__)
    #define BYTE_ORDER      BIG_ENDIAN
   #endif
 
  #endif /* HAVE_MACHINE_ENDIAN_H */
 #endif /* HAVE_SYS_ENDIAN_H */
#endif /* HAVE_ENDIAN_H */
 
#if !defined(__BYTE_ORDER) || (__BYTE_ORDER != __BIG_ENDIAN && __BYTE_ORDER != __LITTLE_ENDIAN)
 # error "Undefined or unknown BYTE_ORDER"
#endif

#cmakedefine HAVE_SYS_QUEUE_H    1
#cmakedefine HAVE_SYS_MMAN_H     1
#cmakedefine HAVE_SYS_SOCKET_H   1
#cmakedefine HAVE_SYS_UN_H       1
#cmakedefine HAVE_SYS_STAT_H     1
#cmakedefine HAVE_SYS_WAIT_H     1
#cmakedefine HAVE_SYS_PARAM_H    1
#cmakedefine HAVE_SYS_FILE_H     1

#cmakedefine HAVE_INET_PTON      1

#cmakedefine THREAD_UNSAFE		 1

/* sys/types */
#ifdef HAVE_SYS_TYPES_H
#include <sys/types.h>
#endif

/* cdefs */
#ifdef HAVE_SYS_CDEFS_H
#include <sys/cdefs.h>
#endif

/* sys/param */
#ifdef HAVE_SYS_PARAM_H
#include <sys/param.h>
#endif

/* stdint */
#ifdef HAVE_STDINT_H
#include <stdint.h>
#elif defined(HAVE_INTTYPES_H)
#include <inttypes.h>
#endif

/* stdbool */
#ifdef HAVE_STDBOOL_H
#include <stdbool.h>
#endif

#ifndef THREAD_UNSAFE
#include <pthread.h>
#endif

/* queue */
#ifdef HAVE_COMPATIBLE_QUEUE_H
#ifdef HAVE_SYS_QUEUE_H
#include <sys/queue.h>
#endif
#else
#include "queue.h"
#endif

/* sys/socket */
#ifdef HAVE_SYS_SOCKET_H
#include <sys/socket.h>
#endif

/* sys/file.h */
#ifdef HAVE_SYS_FILE_H
#include <sys/file.h>
#endif

/* sys/uio.h */
#ifdef HAVE_SYS_UIO_H
#include <sys/uio.h>
#endif

/* sys/mman */
#ifdef HAVE_SYS_MMAN_H
#include <sys/mman.h>
#endif

/* netinet issues */
#ifdef HAVE_NETINET_IN_H
#include <netinet/in.h>
#endif
#ifdef HAVE_ARPA_INET_H
#include <arpa/inet.h>
#endif

/* unix sockets */
#ifdef HAVE_SYS_UN_H
#include <sys/un.h>
#endif

/* netdb */
#ifdef HAVE_NETDB_H
#include <netdb.h>
#endif

/* stdlib */
#ifdef HAVE_STDLIB_H
#include <stdlib.h>
#endif

/* stdio */
#ifdef HAVE_STDIO_H
#include <stdio.h>
#endif

/* time */
#ifdef HAVE_TIME_H
#include <time.h>
#endif

/* unistd */
#ifdef HAVE_UNISTD_H
#include <unistd.h>
#endif


/* string */
#ifdef HAVE_STRING_H
#include <string.h>
#endif

/* strings */
#ifdef HAVE_STRINGS_H
#include <strings.h>
#endif

/* fcntl */
#ifdef HAVE_FCNTL_H
#include <fcntl.h>
#endif

/* poll */
#ifdef HAVE_POLL_H
#include <poll.h>
#endif

/* sys/stat */
#ifdef HAVE_SYS_STAT_H
#include <sys/stat.h>
#endif

/* sys/wait */
#ifdef HAVE_SYS_WAIT_H
#include <sys/wait.h>
#endif

/* math */
#ifdef HAVE_MATH_H
#include <math.h>
#endif

#include <errno.h>
#include <signal.h>

struct lt_module_ctx;

typedef struct module_s {
    char *name;
    int (*module_init_func)(struct lt_module_ctx **ctx);
    int (*module_socket_func)(struct lt_module_ctx *ctx);
    int (*module_setopts_func)(struct lt_module_ctx *ctx, int sock, int optname, int optvalue);
    int (*module_bind_func)(struct lt_module_ctx *ctx, int sock, const struct sockaddr *addr, socklen_t addrlen);
    int (*module_listen_func)(struct lt_module_ctx *ctx, int sock, int backlog);
    int (*module_accept_func)(struct lt_module_ctx *ctx, int sock, struct sockaddr *addr, socklen_t *addrlen);
    int (*module_connect_func)(struct lt_module_ctx *ctx, int sock, const struct sockaddr *addr, socklen_t addrlen);
    ssize_t (*module_read_func)(struct lt_module_ctx *ctx, int sock, void *buf, size_t len);
    ssize_t (*module_write_func)(struct lt_module_ctx *ctx, int sock, const void *buf, size_t len);
    /** TODO: add iovector functions as well */
    int (*module_select_func)(struct lt_module_ctx *ctx, int sock, short what, const struct timeval *tv);
    int (*module_close_func)(struct lt_module_ctx *ctx, int sock);
    int (*module_destroy_func)(struct lt_module_ctx *ctx);
} module_t;

extern module_t *modules[];

#endif